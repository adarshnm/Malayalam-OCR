# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\predictionuiFile.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import cv2
import os


class Ui_MainWindow(object):
    data_folder = 'data/binarized_test_data/cropped/'
    custom_config = {}

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QLabel(
            self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(30, 210, 720, 331))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView.setFrameShape(QtWidgets.QFrame.Box)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(290, 91, 211, 31))
        self.comboBox.setObjectName("comboBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(320, 60, 161, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.generatePredictionButton = QtWidgets.QPushButton(
            self.centralwidget)
        self.generatePredictionButton.setGeometry(
            QtCore.QRect(350, 150, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.generatePredictionButton.setFont(font)
        self.generatePredictionButton.setObjectName("generatePredictionButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.refresh_images()
        self.comboBox.currentTextChanged.connect(self.image_selection_changed)
        self.image_selection_changed()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Select Image"))
        self.generatePredictionButton.setText(
            _translate("MainWindow", "Predict"))

    def image_selection_changed(self):
        pmap = QtGui.QPixmap(self.data_folder + self.comboBox.currentText())
        pmap = pmap.scaled(self.graphicsView.width(),
                           self.graphicsView.height(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView.setPixmap(pmap)
        self.graphicsView.setAlignment(QtCore.Qt.AlignCenter)

    def refresh_images(self):
        data_files = os.listdir(self.data_folder)
        self.comboBox.addItems(data_files)

    def word_seg(self, inp_img, rect=(5, 1), iter=1):
        image = inp_img.copy()
        image = cv2.bitwise_not(image)

        kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, rect)

        #Dilation (Stretching or Expansion)

        dilate = cv2.dilate(image, kernel, iterations=iter)

        # Binarization (Otsu)
        threshold = 128
        _, bw = cv2.threshold(dilate, threshold, 255.0,
                              cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        #Closing (DIlation + Erosion)
        close_rect = (6, 3)
        kernel2 = cv2.getStructuringElement(cv2.MORPH_RECT, close_rect)
        connected = cv2.morphologyEx(bw, cv2.MORPH_CLOSE, kernel2)

        # Finding Contour (Edges)
        contours, _ = cv2.findContours(
            connected.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        contours.reverse()

        s_rect = rearrange(contours)
        words = []
        i = 0
        img2 = inp_img.copy()
        for rect in s_rect:
            x, y, w, h = rect
            cv2.rectangle(img2, (x, y), (x+w, y+h), (0, 0, 0), 2)
            cv2.putText(img2, str(i), (x+w+10, y+h), 0, 0.3, (0, 0, 0))
            word = (inp_img[y:y+h, x:x+w])
            ret, thresh4 = cv2.threshold(word, 127, 255, cv2.THRESH_TOZERO)

            # inc is the increment for differ
            inc = 1*(255-splMean(thresh4, 90))
            #ret,thresh4 = cv2.threshold(word,127,255,cv2.THRESH_BINARY)
            thresh4 = cv2.adaptiveThreshold(
                word, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 115, 1)
            word = np.array([[min(j+inc, 255) if j > 90 else j for j in thresh4[k]]
                            for k in range(len(thresh4))], dtype=np.uint8)
            # word=thresh4
            # mplot(thresh4,word)
            words.append(word)
            i += 1

        word_image = bin_img.copy()
        for j, c in enumerate(contours):
            c_temp = cv2.boundingRect(c)
            if c_temp[2] <= 25 or c_temp[3] <= 25:
                continue
            x, y, w, h = c_temp
            cv2.rectangle(word_image, (x, y), (x + w, y + h), (0, 0, 0), 2)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
